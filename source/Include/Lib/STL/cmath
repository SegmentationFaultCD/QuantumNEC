#pragma once
#include <Lib/Types/Uefi.hpp>
#include <Lib/Types/type_double.hpp>
#include <Arch/ArchInfo.hpp>
PUBLIC namespace QuantumNEC::Lib::STL {
    PUBLIC constexpr auto PI { 3.1415926 };
    PUBLIC constexpr inline auto
    min( IN OUT CONST auto &a, IN OUT CONST auto &b ) {
        return a < b ? a : b;
    }
    PUBLIC constexpr inline auto
    max( IN OUT CONST auto &a, IN OUT CONST auto &b ) {
        return a > b ? a : b;
    }
    /**
     * @brief 求绝对值
     * @param digit 求这个数的绝对值
     */
    PUBLIC constexpr inline auto abs( IN CONST auto &digit ) {
        return digit < 0 ? -digit : digit;
    }

    PUBLIC template < typename T >
        requires requires( T t ) {
            { t *t };
            { t = t };
        }
    PUBLIC constexpr inline auto pow( IN CONST T & __base, IN Lib::Types::uint64_t exp )->T {
        T result { 1 };
        T base { __base };
        while ( exp ) {
            if ( exp & 1 )
                result *= base;
            exp >>= 1;
            base *= base;
        }
        return result;
    }

    PUBLIC constexpr inline auto floor( IN Lib::Types::double32_t x )->Lib::Types::double32_t {
        return ( x - 1 + 0.0000001f ) / 1;
    }

    PUBLIC constexpr inline auto ceil( IN Lib::Types::double32_t x )->Lib::Types::double32_t {
        return ( x + 1 - 0.0000001f ) / 1;
    }

    PUBLIC constexpr inline auto round( IN Lib::Types::double32_t x )->Lib::Types::double32_t {
        return ( x > 0 ) ? floor( x + 0.5 ) : ceil( x - 0.5 );
    }

    PUBLIC constexpr inline auto fmod( IN Lib::Types::double32_t x, Lib::Types::double32_t y )
        ->Lib::Types::double32_t {
        return x - static_cast< Lib::Types::int32_t >( x / y ) * y;
    }
    PUBLIC inline auto atan( IN Lib::Types::double32_t x )->Lib::Types::double32_t {
        STATIC CONST Lib::Types::uint32_t sign_mask { 0x80000000 };
        STATIC CONST Lib::Types::double32_t b { 0.596227f };
        Lib::Types::uint32_t ux_s { sign_mask & (Lib::Types::uint32_t &)x };
        Lib::Types::double32_t bx_a { abs( b * x ) };
        Lib::Types::double32_t num { bx_a + x * x };
        Lib::Types::double32_t atan_1q { num / ( 1.f + bx_a + num ) };
        Lib::Types::uint32_t atan_2q { ux_s | (Lib::Types::uint32_t &)atan_1q };
        return (Lib::Types::double32_t &)( atan_2q );
    }

    PUBLIC inline auto atan2( IN Lib::Types::double32_t x, Lib::Types::double32_t y )
        ->Lib::Types::double32_t {
        STATIC CONST Lib::Types::uint32_t sign_mask { 0x80000000 };
        STATIC CONST Lib::Types::double32_t b { 0.596227f };
        Lib::Types::uint32_t ux_s { sign_mask & (Lib::Types::uint32_t &)x };
        Lib::Types::uint32_t uy_s { sign_mask & (Lib::Types::uint32_t &)y };
        Lib::Types::double32_t q { ( Lib::Types::double32_t )( ( ~ux_s & uy_s ) >> 29
                                                               | ux_s >> 30 ) };
        Lib::Types::double32_t bxy_a { abs( b * x * y ) };
        Lib::Types::double32_t num { bxy_a + y * y };
        Lib::Types::double32_t atan_1q { num / ( x * x + bxy_a + num ) };
        Lib::Types::uint32_t uatan_2q { ( ux_s ^ uy_s )
                                        | (Lib::Types::uint32_t &)atan_1q };
        return q + (Lib::Types::double32_t &)( uatan_2q );
    }
}