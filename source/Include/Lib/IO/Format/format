#pragma once
#include <Lib/STL/string>
#include <Lib/Types/Uefi.hpp>
#include <utility>
PUBLIC namespace QuantumNEC::Lib::IO {
    char int_fmt { 10 };       // 整数输出格式：二进制，八进制，十进制，十六进制
    char float_fmt { };        // 浮点输出格式
    char char_fmt { ' ' };     // 参数对齐时填充的字符

    template < typename T >
    auto format( T )->Lib::STL::string;
    template <>
    inline auto format< char >( char __val )->Lib::STL::string {
        char *buff = new char[] { __val, '\0' };
        Lib::STL::string buf2 { buff };
        delete buff;
        return Lib::STL::string { buf2 };
    }
    template <>
    inline auto format< const char * >( const char *__val )->Lib::STL::string {
        return Lib::STL::string { __val };
    }
    template <>
    inline auto format< long long int >( long long int __val )->Lib::STL::string {
        char buff[ 0xff ] { };
        Lib::STL::itoa( __val, buff, int_fmt );
        return Lib::STL::string { buff };
    }
    template <>
    inline auto format< short int >( short int __val )->Lib::STL::string {
        return format( (long long int)__val );
    }
    template <>
    inline auto format< int >( int __val )->Lib::STL::string {
        return format( (long long int)__val );
    }
    template <>
    inline auto format< long int >( long int __val )->Lib::STL::string {
        return format( (long long int)__val );
    }
    template <>
    inline auto format< unsigned long long int >( unsigned long long int __val )->Lib::STL::string {
        char buff[ 0xff ] { };
        Lib::STL::itoa( __val, buff, int_fmt );
        return Lib::STL::string { buff };
    }
    template <>
    inline auto format< unsigned short int >( unsigned short int __val )->Lib::STL::string {
        return format( (unsigned long long)__val );
    }
    template <>
    inline auto format< unsigned int >( unsigned int __val )->Lib::STL::string {
        return format( (unsigned long long)__val );
    }
    template <>
    inline auto format< unsigned long int >( unsigned long int __val )->Lib::STL::string {
        return format( (unsigned long long)__val );
    }
    template <>
    auto format( long double __val )->Lib::STL::string;
    template <>
    inline auto format< float >( float __val )->Lib::STL::string {
        return format( (long double)( __val ) );
    }
    template <>
    inline auto format< double >( double __val )->Lib::STL::string {
        return format( (long double)( __val ) );
    }
    template <>
    inline auto format< void * >( void *__val )->Lib::STL::string {
        char buff[ 0xff ] { };
        Lib::STL::itoa( (unsigned long long int)( __val ), buff, 16 );
        return ( Lib::STL::string { buff } );
    }
    template <>
    inline auto format< short int * >( short int *__val )->Lib::STL::string {
        return format( (void *)( __val ) );
    }
    template <>
    inline auto format< int * >( int *__val )->Lib::STL::string {
        return format( (void *)( __val ) );
    }
    template <>
    inline auto format< long int * >( long int *__val )->Lib::STL::string {
        return format( (void *)( __val ) );
    }
    template <>
    inline auto format< long long int * >( long long int *__val )->Lib::STL::string {
        return format( (void *)( __val ) );
    }
    template <>
    inline auto format< unsigned short int * >( unsigned short int *__val )->Lib::STL::string {
        return format( (void *)( __val ) );
    }
    template <>
    inline auto format< unsigned int * >( unsigned int *__val )->Lib::STL::string {
        return format( (void *)( __val ) );
    }
    template <>
    inline auto format< unsigned long int * >( unsigned long int *__val )->Lib::STL::string {
        return format( (void *)( __val ) );
    }
    template <>
    inline auto format< unsigned long long int * >( unsigned long long int *__val )->Lib::STL::string {
        return format( (void *)( __val ) );
    }
    auto check_format( const char **__fmt, auto &&args )->Lib::STL::string {
        Lib::STL::string buf { "" };
        while ( *( *__fmt ) != '\0' ) {
            if ( *( *__fmt ) == '{' ) {
                ( *__fmt )++;
                if ( *( *__fmt ) == '}' ) {
                    buf += format( args );
                    ( *__fmt )++;
                    return buf;
                }
                if ( *( *__fmt ) == '{' ) {
                    buf += format( "{" );
                    ( *__fmt )++;
                    return buf;
                }
                if ( *( *__fmt ) == ':' ) {
                    // 设置要填充的字符（默认）
                    ( *__fmt )++;
                    if ( *( *__fmt ) == '>' )     // 右对齐
                    {
                    }
                    else if ( *( *__fmt ) == '<' )     // 左对齐
                    {
                    }
                    else if ( *( *__fmt ) == '^' )     // 中间对其
                    {
                    }
                    else {
                        ( *__fmt )++;
                        // 设置要填充的字符（已选定）
                        if ( *( *__fmt ) == '>' )     // 同上
                        {
                        }
                        else if ( *( *__fmt ) == '<' ) {
                        }
                        else if ( *( *__fmt ) == '^' ) {
                        }
                    }
                }
            }
            buf += *( ( *__fmt )++ );
        }
        return buf;
    }
    auto format( const char *__fmt, auto &&...args )->Lib::STL::string {
        Lib::STL::string buf { "" };
        ( ( buf += check_format( &__fmt, args ) ), ... );
        while ( *__fmt ) {
            buf += format( *__fmt++ );
        }
        return buf;
    }
}