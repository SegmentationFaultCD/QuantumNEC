add_rules("mode.debug", "mode.release")
add_cxxflags("-m64")
add_cxxflags("-fno-builtin")
add_cxxflags("-mcmodel=large")
add_cxxflags("-ffreestanding")
add_cxxflags("-fno-stack-protector")
add_cxxflags("-nostdlib")
add_cxxflags("-nostartfiles")
add_cxxflags("-fstrength-reduce")
add_cxxflags("-falign-loops")
add_cxxflags("-falign-jumps")
add_cxxflags("-fno-strict-aliasing")
add_cxxflags("-fno-common")
add_cxxflags("-fno-rtti")
add_cxxflags("-fno-exceptions")
add_cxxflags("-mno-red-zone")
add_cxxflags("-fno-stack-check")
add_cxxflags("-fno-lto")
add_cxxflags("-Wall")
add_cxxflags("-Wextra")
add_cxxflags("-Werror")
add_cxxflags("-fno-PIC")
add_includedirs("../../Include")
set_optimize("none")
set_languages("c17", "c++23")

target("servicer.elf")
    set_kind("binary")
    add_files("servicer.cpp" )
    before_build(function (target) 
        print("开始编译模块文件servicer.elf")
    end)
    on_build(function (target)  
        object_dir = target:objectdir()
        run_dir = target:rundir()
        object_string = ""
        for key,val in pairs(target:objectfiles()) do 
            object_string = object_string..val.." "
        end 
        os.mkdir(run_dir)
        os.exec("ld "..object_string.." "..run_dir.."/libcxx.a -o "..run_dir.."/servicer.elf" )
    end)
    after_build(function (target) 
        run_dir = target:rundir()
        print("模块文件servicer.elf编译完成，在"..run_dir.."")
    end)

